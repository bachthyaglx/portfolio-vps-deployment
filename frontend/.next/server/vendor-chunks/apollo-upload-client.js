"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/apollo-upload-client";
exports.ids = ["vendor-chunks/apollo-upload-client"];
exports.modules = {

/***/ "(ssr)/./node_modules/apollo-upload-client/public/createUploadLink.js":
/*!**********************************************************************!*\
  !*** ./node_modules/apollo-upload-client/public/createUploadLink.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst { ApolloLink, Observable } = __webpack_require__(/*! @apollo/client/core */ \"(ssr)/./node_modules/@apollo/client/core/index.js\");\nconst {\n  createSignalIfSupported,\n  fallbackHttpConfig,\n  parseAndCheckHttpResponse,\n  rewriteURIForGET,\n  selectHttpOptionsAndBody,\n  selectURI,\n  serializeFetchParameter,\n} = __webpack_require__(/*! @apollo/client/link/http */ \"(ssr)/./node_modules/@apollo/client/link/http/index.js\");\nconst extractFiles = __webpack_require__(/*! extract-files/public/extractFiles.js */ \"(ssr)/./node_modules/extract-files/public/extractFiles.js\");\nconst formDataAppendFile = __webpack_require__(/*! ./formDataAppendFile.js */ \"(ssr)/./node_modules/apollo-upload-client/public/formDataAppendFile.js\");\nconst isExtractableFile = __webpack_require__(/*! ./isExtractableFile.js */ \"(ssr)/./node_modules/apollo-upload-client/public/isExtractableFile.js\");\n\n/**\n * Creates a\n * [terminating Apollo Link](https://apollographql.com/docs/react/api/link/introduction/#the-terminating-link)\n * for [Apollo Client](https://apollographql.com/docs/react) that fetches a\n * [GraphQL multipart request](https://github.com/jaydenseric/graphql-multipart-request-spec)\n * if the GraphQL variables contain files (by default\n * [`FileList`](https://developer.mozilla.org/en-US/docs/Web/API/FileList),\n * [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File),\n * [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob), or\n * [`ReactNativeFile`](#class-reactnativefile) instances), or else fetches a\n * regular\n * [GraphQL POST or GET request](https://apollographql.com/docs/apollo-server/requests)\n * (depending on the config and GraphQL operation).\n *\n * Some of the options are similar to the\n * [`createHttpLink` options](https://apollographql.com/docs/react/api/link/apollo-link-http/#httplink-constructor-options).\n * @see [GraphQL multipart request spec](https://github.com/jaydenseric/graphql-multipart-request-spec).\n * @kind function\n * @name createUploadLink\n * @param {object} options Options.\n * @param {string} [options.uri=\"/graphql\"] GraphQL endpoint URI.\n * @param {boolean} [options.useGETForQueries] Should GET be used to fetch queries, if there are no files to upload.\n * @param {ExtractableFileMatcher} [options.isExtractableFile=isExtractableFile] Customizes how files are matched in the GraphQL operation for extraction.\n * @param {class} [options.FormData] [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) implementation to use, defaulting to the [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) global.\n * @param {FormDataFileAppender} [options.formDataAppendFile=formDataAppendFile] Customizes how extracted files are appended to the [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) instance.\n * @param {Function} [options.fetch] [`fetch`](https://fetch.spec.whatwg.org) implementation to use, defaulting to the [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch) global.\n * @param {FetchOptions} [options.fetchOptions] [`fetch` options]{@link FetchOptions}; overridden by upload requirements.\n * @param {string} [options.credentials] Overrides `options.fetchOptions.credentials`.\n * @param {object} [options.headers] Merges with and overrides `options.fetchOptions.headers`.\n * @param {boolean} [options.includeExtensions=false] Toggles sending `extensions` fields to the GraphQL server.\n * @returns {ApolloLink} A [terminating Apollo Link](https://apollographql.com/docs/react/api/link/introduction/#the-terminating-link).\n * @example <caption>Ways to `import`.</caption>\n * ```js\n * import { createUploadLink } from \"apollo-upload-client\";\n * ```\n *\n * ```js\n * import createUploadLink from \"apollo-upload-client/public/createUploadLink.js\";\n * ```\n * @example <caption>Ways to `require`.</caption>\n * ```js\n * const { createUploadLink } = require(\"apollo-upload-client\");\n * ```\n *\n * ```js\n * const createUploadLink = require(\"apollo-upload-client/public/createUploadLink.js\");\n * ```\n * @example <caption>A basic Apollo Client setup.</caption>\n * ```js\n * import { ApolloClient, InMemoryCache } from \"@apollo/client\";\n * import createUploadLink from \"apollo-upload-client/public/createUploadLink.js\";\n *\n * const client = new ApolloClient({\n *   cache: new InMemoryCache(),\n *   link: createUploadLink(),\n * });\n * ```\n */\nmodule.exports = function createUploadLink({\n  uri: fetchUri = \"/graphql\",\n  useGETForQueries,\n  isExtractableFile: customIsExtractableFile = isExtractableFile,\n  FormData: CustomFormData,\n  formDataAppendFile: customFormDataAppendFile = formDataAppendFile,\n  fetch: customFetch,\n  fetchOptions,\n  credentials,\n  headers,\n  includeExtensions,\n} = {}) {\n  const linkConfig = {\n    http: { includeExtensions },\n    options: fetchOptions,\n    credentials,\n    headers,\n  };\n\n  return new ApolloLink((operation) => {\n    const context = operation.getContext();\n    const {\n      // Apollo Studio client awareness `name` and `version` can be configured\n      // via `ApolloClient` constructor options:\n      // https://apollographql.com/docs/studio/client-awareness/#using-apollo-server-and-apollo-client\n      clientAwareness: { name, version } = {},\n      headers,\n    } = context;\n\n    const contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: {\n        // Client awareness headers can be overridden by context `headers`.\n        ...(name && { \"apollographql-client-name\": name }),\n        ...(version && { \"apollographql-client-version\": version }),\n        ...headers,\n      },\n    };\n\n    const { options, body } = selectHttpOptionsAndBody(\n      operation,\n      fallbackHttpConfig,\n      linkConfig,\n      contextConfig\n    );\n\n    const { clone, files } = extractFiles(body, \"\", customIsExtractableFile);\n\n    let uri = selectURI(operation, fetchUri);\n\n    if (files.size) {\n      // Automatically set by `fetch` when the `body` is a `FormData` instance.\n      delete options.headers[\"content-type\"];\n\n      // GraphQL multipart request spec:\n      // https://github.com/jaydenseric/graphql-multipart-request-spec\n\n      const RuntimeFormData = CustomFormData || FormData;\n\n      const form = new RuntimeFormData();\n\n      form.append(\"operations\", serializeFetchParameter(clone, \"Payload\"));\n\n      const map = {};\n      let i = 0;\n      files.forEach((paths) => {\n        map[++i] = paths;\n      });\n      form.append(\"map\", JSON.stringify(map));\n\n      i = 0;\n      files.forEach((paths, file) => {\n        customFormDataAppendFile(form, ++i, file);\n      });\n\n      options.body = form;\n    } else {\n      if (\n        useGETForQueries &&\n        // If the operation contains some mutations GET shouldn’t be used.\n        !operation.query.definitions.some(\n          (definition) =>\n            definition.kind === \"OperationDefinition\" &&\n            definition.operation === \"mutation\"\n        )\n      )\n        options.method = \"GET\";\n\n      if (options.method === \"GET\") {\n        const { newURI, parseError } = rewriteURIForGET(uri, body);\n        if (parseError)\n          // Apollo’s `HttpLink` uses `fromError` for this, but it’s not\n          // exported from `@apollo/client/link/http`.\n          return new Observable((observer) => {\n            observer.error(parseError);\n          });\n        uri = newURI;\n      } else options.body = serializeFetchParameter(clone, \"Payload\");\n    }\n\n    const { controller } = createSignalIfSupported();\n\n    if (controller) {\n      if (options.signal)\n        // Respect the user configured abort controller signal.\n        options.signal.aborted\n          ? // Signal already aborted, so immediately abort.\n            controller.abort()\n          : // Signal not already aborted, so setup a listener to abort when it\n            // does.\n            options.signal.addEventListener(\n              \"abort\",\n              () => {\n                controller.abort();\n              },\n              {\n                // Prevent a memory leak if the user configured abort controller\n                // is long lasting, or controls multiple things.\n                once: true,\n              }\n            );\n\n      options.signal = controller.signal;\n    }\n\n    const runtimeFetch = customFetch || fetch;\n\n    return new Observable((observer) => {\n      // Used to track if the observable is being cleaned up.\n      let cleaningUp;\n\n      runtimeFetch(uri, options)\n        .then((response) => {\n          // Forward the response on the context.\n          operation.setContext({ response });\n          return response;\n        })\n        .then(parseAndCheckHttpResponse(operation))\n        .then((result) => {\n          observer.next(result);\n          observer.complete();\n        })\n        .catch((error) => {\n          // If the observable is being cleaned up, there is no need to call\n          // next or error because there are no more subscribers. An error after\n          // cleanup begins is likely from the cleanup function aborting the\n          // fetch.\n          if (!cleaningUp) {\n            // For errors such as an invalid fetch URI there will be no GraphQL\n            // result with errors or data to forward.\n            if (error.result && error.result.errors && error.result.data)\n              observer.next(error.result);\n\n            observer.error(error);\n          }\n        });\n\n      // Cleanup function.\n      return () => {\n        cleaningUp = true;\n\n        // Abort fetch. It’s ok to signal an abort even when not fetching.\n        if (controller) controller.abort();\n      };\n    });\n  });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/apollo-upload-client/public/createUploadLink.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/apollo-upload-client/public/formDataAppendFile.js":
/*!************************************************************************!*\
  !*** ./node_modules/apollo-upload-client/public/formDataAppendFile.js ***!
  \************************************************************************/
/***/ ((module) => {

eval("\n\n/**\n * The default implementation for [`createUploadLink`]{@link createUploadLink}\n * `options.formDataAppendFile` that uses the standard\n * [`FormData.append`](https://developer.mozilla.org/en-US/docs/Web/API/FormData/append)\n * method.\n * @kind function\n * @name formDataAppendFile\n * @type {FormDataFileAppender}\n * @param {FormData} formData [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) instance to append the specified file to.\n * @param {string} fieldName Field name for the file.\n * @param {*} file File to append.\n * @example <caption>Ways to `import`.</caption>\n * ```js\n * import { formDataAppendFile } from \"apollo-upload-client\";\n * ```\n *\n * ```js\n * import formDataAppendFile from \"apollo-upload-client/public/formDataAppendFile.js\";\n * ```\n * @example <caption>Ways to `require`.</caption>\n * ```js\n * const { formDataAppendFile } = require(\"apollo-upload-client\");\n * ```\n *\n * ```js\n * const formDataAppendFile = require(\"apollo-upload-client/public/formDataAppendFile.js\");\n * ```\n */\nmodule.exports = function formDataAppendFile(formData, fieldName, file) {\n  formData.append(fieldName, file, file.name);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXBvbGxvLXVwbG9hZC1jbGllbnQvcHVibGljL2Zvcm1EYXRhQXBwZW5kRmlsZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBLHVEQUF1RDtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWLFdBQVcsVUFBVTtBQUNyQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxHQUFHO0FBQ2Q7QUFDQTtBQUNBLFlBQVkscUJBQXFCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxxQkFBcUI7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ydGZvbGlvLy4vbm9kZV9tb2R1bGVzL2Fwb2xsby11cGxvYWQtY2xpZW50L3B1YmxpYy9mb3JtRGF0YUFwcGVuZEZpbGUuanM/YWM1OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBmb3IgW2BjcmVhdGVVcGxvYWRMaW5rYF17QGxpbmsgY3JlYXRlVXBsb2FkTGlua31cbiAqIGBvcHRpb25zLmZvcm1EYXRhQXBwZW5kRmlsZWAgdGhhdCB1c2VzIHRoZSBzdGFuZGFyZFxuICogW2BGb3JtRGF0YS5hcHBlbmRgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRm9ybURhdGEvYXBwZW5kKVxuICogbWV0aG9kLlxuICogQGtpbmQgZnVuY3Rpb25cbiAqIEBuYW1lIGZvcm1EYXRhQXBwZW5kRmlsZVxuICogQHR5cGUge0Zvcm1EYXRhRmlsZUFwcGVuZGVyfVxuICogQHBhcmFtIHtGb3JtRGF0YX0gZm9ybURhdGEgW2BGb3JtRGF0YWBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9Gb3JtRGF0YSkgaW5zdGFuY2UgdG8gYXBwZW5kIHRoZSBzcGVjaWZpZWQgZmlsZSB0by5cbiAqIEBwYXJhbSB7c3RyaW5nfSBmaWVsZE5hbWUgRmllbGQgbmFtZSBmb3IgdGhlIGZpbGUuXG4gKiBAcGFyYW0geyp9IGZpbGUgRmlsZSB0byBhcHBlbmQuXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5XYXlzIHRvIGBpbXBvcnRgLjwvY2FwdGlvbj5cbiAqIGBgYGpzXG4gKiBpbXBvcnQgeyBmb3JtRGF0YUFwcGVuZEZpbGUgfSBmcm9tIFwiYXBvbGxvLXVwbG9hZC1jbGllbnRcIjtcbiAqIGBgYFxuICpcbiAqIGBgYGpzXG4gKiBpbXBvcnQgZm9ybURhdGFBcHBlbmRGaWxlIGZyb20gXCJhcG9sbG8tdXBsb2FkLWNsaWVudC9wdWJsaWMvZm9ybURhdGFBcHBlbmRGaWxlLmpzXCI7XG4gKiBgYGBcbiAqIEBleGFtcGxlIDxjYXB0aW9uPldheXMgdG8gYHJlcXVpcmVgLjwvY2FwdGlvbj5cbiAqIGBgYGpzXG4gKiBjb25zdCB7IGZvcm1EYXRhQXBwZW5kRmlsZSB9ID0gcmVxdWlyZShcImFwb2xsby11cGxvYWQtY2xpZW50XCIpO1xuICogYGBgXG4gKlxuICogYGBganNcbiAqIGNvbnN0IGZvcm1EYXRhQXBwZW5kRmlsZSA9IHJlcXVpcmUoXCJhcG9sbG8tdXBsb2FkLWNsaWVudC9wdWJsaWMvZm9ybURhdGFBcHBlbmRGaWxlLmpzXCIpO1xuICogYGBgXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZm9ybURhdGFBcHBlbmRGaWxlKGZvcm1EYXRhLCBmaWVsZE5hbWUsIGZpbGUpIHtcbiAgZm9ybURhdGEuYXBwZW5kKGZpZWxkTmFtZSwgZmlsZSwgZmlsZS5uYW1lKTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/apollo-upload-client/public/formDataAppendFile.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/apollo-upload-client/public/isExtractableFile.js":
/*!***********************************************************************!*\
  !*** ./node_modules/apollo-upload-client/public/isExtractableFile.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\n/**\n * The default implementation for [`createUploadLink`]{@link createUploadLink}\n * `options.isExtractableFile`.\n * @kind function\n * @name isExtractableFile\n * @type {ExtractableFileMatcher}\n * @param {*} value Value to check.\n * @returns {boolean} Is the value an extractable file.\n * @see [`extract-files` `isExtractableFile` docs](https://github.com/jaydenseric/extract-files#function-isextractablefile).\n * @example <caption>Ways to `import`.</caption>\n * ```js\n * import { isExtractableFile } from \"apollo-upload-client\";\n * ```\n *\n * ```js\n * import isExtractableFile from \"apollo-upload-client/public/isExtractableFile.js\";\n * ```\n * @example <caption>Ways to `require`.</caption>\n * ```js\n * const { isExtractableFile } = require(\"apollo-upload-client\");\n * ```\n *\n * ```js\n * const isExtractableFile = require(\"apollo-upload-client/public/isExtractableFile.js\");\n * ```\n */\nmodule.exports = __webpack_require__(/*! extract-files/public/isExtractableFile.js */ \"(ssr)/./node_modules/extract-files/public/isExtractableFile.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXBvbGxvLXVwbG9hZC1jbGllbnQvcHVibGljL2lzRXh0cmFjdGFibGVGaWxlLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0EsdURBQXVEO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixXQUFXLEdBQUc7QUFDZCxhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBO0FBQ0EsWUFBWSxvQkFBb0I7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLG9CQUFvQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1SkFBcUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3J0Zm9saW8vLi9ub2RlX21vZHVsZXMvYXBvbGxvLXVwbG9hZC1jbGllbnQvcHVibGljL2lzRXh0cmFjdGFibGVGaWxlLmpzP2MyN2MiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gZm9yIFtgY3JlYXRlVXBsb2FkTGlua2Bde0BsaW5rIGNyZWF0ZVVwbG9hZExpbmt9XG4gKiBgb3B0aW9ucy5pc0V4dHJhY3RhYmxlRmlsZWAuXG4gKiBAa2luZCBmdW5jdGlvblxuICogQG5hbWUgaXNFeHRyYWN0YWJsZUZpbGVcbiAqIEB0eXBlIHtFeHRyYWN0YWJsZUZpbGVNYXRjaGVyfVxuICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBJcyB0aGUgdmFsdWUgYW4gZXh0cmFjdGFibGUgZmlsZS5cbiAqIEBzZWUgW2BleHRyYWN0LWZpbGVzYCBgaXNFeHRyYWN0YWJsZUZpbGVgIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9qYXlkZW5zZXJpYy9leHRyYWN0LWZpbGVzI2Z1bmN0aW9uLWlzZXh0cmFjdGFibGVmaWxlKS5cbiAqIEBleGFtcGxlIDxjYXB0aW9uPldheXMgdG8gYGltcG9ydGAuPC9jYXB0aW9uPlxuICogYGBganNcbiAqIGltcG9ydCB7IGlzRXh0cmFjdGFibGVGaWxlIH0gZnJvbSBcImFwb2xsby11cGxvYWQtY2xpZW50XCI7XG4gKiBgYGBcbiAqXG4gKiBgYGBqc1xuICogaW1wb3J0IGlzRXh0cmFjdGFibGVGaWxlIGZyb20gXCJhcG9sbG8tdXBsb2FkLWNsaWVudC9wdWJsaWMvaXNFeHRyYWN0YWJsZUZpbGUuanNcIjtcbiAqIGBgYFxuICogQGV4YW1wbGUgPGNhcHRpb24+V2F5cyB0byBgcmVxdWlyZWAuPC9jYXB0aW9uPlxuICogYGBganNcbiAqIGNvbnN0IHsgaXNFeHRyYWN0YWJsZUZpbGUgfSA9IHJlcXVpcmUoXCJhcG9sbG8tdXBsb2FkLWNsaWVudFwiKTtcbiAqIGBgYFxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBpc0V4dHJhY3RhYmxlRmlsZSA9IHJlcXVpcmUoXCJhcG9sbG8tdXBsb2FkLWNsaWVudC9wdWJsaWMvaXNFeHRyYWN0YWJsZUZpbGUuanNcIik7XG4gKiBgYGBcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZXh0cmFjdC1maWxlcy9wdWJsaWMvaXNFeHRyYWN0YWJsZUZpbGUuanNcIik7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/apollo-upload-client/public/isExtractableFile.js\n");

/***/ })

};
;